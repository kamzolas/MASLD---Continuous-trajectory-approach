data
suppressMessages(library("dorothea"))
data(dorothea_hm, package = "dorothea")
suppressMessages(library("dorothea"))
data(dorothea_hs, package = "dorothea")
regulons = filter(dorothea_hs, confidence %in% c("A", "B"))
suppressMessages(library("dplyr")) # select and %in
regulons = filter(dorothea_hs, confidence %in% c("A", "B"))
regulons
View(regulons)
View(regulons)
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
library(biomaRt)
dataset <- useEnsembl(biomart = 'ensembl',
dataset = 'hsapiens_gene_ensembl',
mirror = "useast")
attrs <- c('ensembl_gene_id', 'external_gene_name')
dataset <- useEnsembl(biomart = 'ensembl',
dataset = 'hsapiens_gene_ensembl',
mirror = "uswest")
attrs <- c('ensembl_gene_id', 'external_gene_name')
query <- getBM(attributes=attrs, mart=dataset)
dim(query)
write.table(x = query, f='/home/thodoris/Projects/Statistical_Methods/data/ensembl_genes.tsv',
sep='\t')
write.csv(x = query, f='/home/thodoris/Projects/Statistical_Methods/data/ensembl_genes.tsv',
sep='\t')
write.csv(x = query, f='/home/thodoris/Projects/Statistical_Methods/data/ensembl_genes.tsv', del='\t')
help("write.csv")
write.csv(x = query, f='/home/thodoris/Projects/Statistical_Methods/data/ensembl_genes.tsv', sep='\t')
query
write.csv(x = query, f='/home/thodoris/Projects/Statistical_Methods/data/ensembl_genes.tsv')
write.csv(query, f='/home/thodoris/Projects/Statistical_Methods/data/ensembl_genes.tsv')
help("write.csv")
write.csv(query, sep='\t', file='/home/thodoris/Projects/Statistical_Methods/data/ensembl_mapping.tsv')
write.table(query, sep='\t', file='/home/thodoris/Projects/Statistical_Methods/data/ensembl_mapping.tsv')
ensembl_mapping <- read.table('/home/thodoris/Projects/Statistical_Methods/data/ensembl_mapping.tsv',
sep='\t')
mt_genes <- read.table('/home/thodoris/Projects/Statistical_Methods/src/mt-ensembl_gene_ids.txt', sep='\t')
mt_genes <- read.table('/home/thodoris/Projects/Statistical_Methods/data/mt-ensembl_gene_ids.txt', sep='\t')
mt_genes <- mt_genes[,1]
mt_genes
ensembl_mapping[ensembl_mapping$ensembl_gene_id in mt_genes,]
ensembl_mapping[ensembl_mapping$ensembl_gene_id %in% mt_genes,]
ensembl_mapping[ensembl_mapping$ensembl_gene_id %in% mt_genes]
mt_genes
ensembl_mapping[ensembl_mapping$ensembl_gene_id in mt_genes]
ensembl_mapping[ensembl_mapping$ensembl_gene_id %in% mt_genes,]
ensembl_mapping
mt_genes
dim(sce_obj)
help(modelGeneVar)
??modelGeneVar
help(assays)
??assays
??ModelGeneVar
help("subset")
library("MAtrix")
library("Matrix")
help("writeMM")
help(assays)
??assays
help("read.table")
BiocManager::install("ReactomePA")
install.packages('ggtree')
install.packages('enrichplot')
BiocManager::install("enrichplot")
BiocManager::install("ggtree")
install.packages("rlang")
BiocManager::install("ggtree")
devtools::install_github("YuLab-SMU/ggtree")
BiocManager::install("enrichplot")
BiocManager::install("ReactomePA")
suppressMessages(library("ReactomePA"))
suppressMessages(library("biomaRt"))
dataset <- useMart("ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl",
host="https://www.ensembl.org")
attrs = c("external_gene_name", "ensembl_gene_id")
query <- getBM(attributes=attrs, mart=dataset)
write.table(query, 'ensembl_mapping.tsv', sep='\t')
suppressMessages(library("biomaRt"))
dataset <- useMart("ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl",
host="https://www.ensembl.org")
write.table(listAttributes(dataset), '../listAttributes', sep='\t')
write.table(listAttributes(dataset), '../listAttributes.tsv', sep='\t')
dataset <- useMart("ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl",
host="https://www.ensembl.org")
write.table(listAttributes(dataset), '../listAttributes.tsv', sep='\t')
listAttributes(dataset)
q <- listAttributes(dataset)
write.table(q, 'listAttributes.tsv', sep='\t')
attrs = c("ensembl_gene_id", "external_gene_name", "entrezgene_synonym")
query <- getBM(attributes=attrs, mart=dataset)
attrs = c("ensembl_gene_id", "external_gene_name", "external_synonym")
query <- getBM(attributes=attrs, mart=dataset)
write.table(q, 'ensembl_gene_ids', sep='\t')
write.table(query, 'ensembl_gene_ids', sep='\t')
help(write.table)
help("read.csv")
help("prop.table")
m <- matrix(1:4, 2)
proportions(m, 1)
m
help("ceiling")
help("sample")
library("biomaRt")
dataset <- useMart("ENSEMBL_MART_ENSEMBL", dataset=paste("hsapiens_gene_ensembl", sep=""),
host="https://www.ensembl.org")
go_attrs = c("external_gene_name","go_id","go_linkage_type", "namespace_1003")
go_query <- getBM(attributes=go_attrs, mart=dataset)
output_file <- paste("GO_mapping", ".tsv", sep="")
write.table(go_query, file=output_file, sep="\t", na="", quote=FALSE, row.names=FALSE)
source("~/get_GO_annotation.R")
help(grep)
help(grepl)
help(perCellQCMetrics)
??perCellQCMetrics
??isOutlier
help("write.table")
s <- c(1,2,3,4,5)
data.frame(s)
df <- data.frame(s)
write.csv(df, file = 'test.csv', row.names = FALSE, header=FALSE)
write.csv(df, file = 'test.csv', row.names = FALSE, head=FALSE)
write.csv(df, file = 'test.csv', row.names = FALSE, names=FALSE)
write.csv(df, file = 'test.csv', row.names = FALSE, col.names=FALSE)
write.table(df, file = 'test.csv', row.names = FALSE, col.names=FALSE)
??SingleCellExperiment
??writeMM
sample(x=seq(1000), size=10)
set.seed(1234)
sample(x=seq(1000), size=10, replace=FALSE)
set.seed(1234)
sample(x=seq(1000), size=10, replace=FALSE)
library("scuttle")
help(isOutlier)
`library(scran)`
`library('scran')`
??modelGeneVar
library('scran')
help("write.table")
help("metadata")
suppressMessages(library("biomaRt"))
dataset <- useMart("ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl",
host="https://www.ensembl.org")
q <- listAttributes(dataset)
q
attrs = c("ensembl_gene_id", "external_gene_name", "external_synonym", "description")
query <- getBM(attributes=attrs, mart=dataset)
write.table(query, 'hsapiens_genes_description.tsv', sep='\t')
library("Dorothea")
library("dorothea")
dorothea_hs()
dorothea_hs
df <- dorothea_hs
View(df)
View(df)
df <- as.data.frame(df)
df[df$tf == 'MYC',]
df[df$tf == 'CMYC',]
df[df$tf == 'C-MYC',]
grepl(pattern='MYC', x=df$tf)
grep(pattern='MYC', x=df$tf, value=TRUE)
unique(grep(pattern='MYC', x=df$tf, value=TRUE))
df[df$tf == 'MYCN',]
dim(df[df$tf == 'MYC',])
dim(df[(df$tf == 'MYC') & (df$confidence == 'A'),])
dim(df[(df$tf == 'MYC') & (df$confidence == 'B'),])
dim(df[(df$tf == 'MYC') & (df$confidence == 'A'),])
df[df$tf == 'MYC',]
library(igraph)
install.packages('installr')
install.packages('installr')
library(installr)
uninstall.R("4.4.0")
uninstall.R("4.4")
get.installed.R.folders()
get.installed.R.folders(sort_by_version)
r_version
version
.libPaths()
R.Version()
uninstall.R(R version 4.4.0 (2024-04-24))
uninstall.R("R version 4.4.0 (2024-04-24)")
get.installed.R.folders()
.libPaths()
install.packages('energy')
s1 <- c(1,1,2,2,1,3,1,4,1,2,3,1,2,3,4,5)
s2 <- c(1.5,0.5,2,2,1,3,1,4,2,2,3,3,2,3,4,5)
library(energy)
install.packages('gsl')
install.packages('gsl')
install.packages('energy')
library(energy)
s1 <- c(1,1,2,2,1,3,1,4,1,2,3,1,2,3,4,5)
s2 <- c(1.5,0.5,2,2,1,3,1,4,2,2,3,3,2,3,4,5)
dcor(s1, s2, index = 2)
s2 <- c(1,0.5,2,2,1,3,1,4,2,2,3,3,2,3,4,5)
dcor(s1, s2, index = 2)
s1 <- c(1,1,2,2,1,3,1,4,1,2,3,1,2,3,4,5)
s2 <- c(0,0,1,0,2,1,2,1,2,2,3,3,2,3,4,5)
dcor(s1, s2, index = 2)
s1 <- c(0.879471485118417,2.34761436824355,-0.338175807024748,-0.641309201408421,2.5065634238319,1.156913232337,3.91079275720563,4.8620553791381,1.20048248452909,3.12813542276675,0.877214632405759,2.78082392842626,2.52448284102927,3.97524770973017,2.80990749877696,1.77949104627265,2.61784471915117,2.87096550789053,3.03890766526748,2.63578841914433,1.86931761810797,1.97865076056747,1.76995359607939,1.6751673929621,1.91039847264269)
s2 <- c(1.87231543525102,3.99903902214379,1.15289475604613,1.17919431703106,3.19606293568008,2.08077780946503,4.29288813023393,5.17672476351131,1.76740963571776,3.4925865805359,1.44929335398807,4.0417761538224,4.76878340965904,5.00501331309933,3.05995810752731,1.89645394202079,3.34157697981624,3.92484527018672,3.73761113690099,2.72367321518044,1.73526452803787,1.91908561490583,2.22989768924562,2.33695340753134,1.7623373209756)
dcor(s1, s2, index = 2)
plot(s1, s2)
model <- lm(s1~s2)
model$coefficients
help(lm)
model <- lm(s1~1+s2)
model$coefficients
model <- lm(s1~s2-1)
model$coefficients
hist(s1-s2)
hist(s1-s2, breaks = 10)
t.test(s1)
t.test(s1-s2)
help("t.test")
s1 <- c(1.879471485118417,3.34761436824355,1.338175807024748,1.641309201408421,2.5065634238319,1.156913232337,3.91079275720563,4.8620553791381,1.20048248452909,3.12813542276675,0.877214632405759,2.78082392842626,2.52448284102927,3.97524770973017,2.80990749877696,1.77949104627265,2.61784471915117,2.87096550789053,3.03890766526748,2.63578841914433,1.86931761810797,1.97865076056747,1.76995359607939,1.6751673929621,1.91039847264269)
s2 <- c(1.87231543525102,3.99903902214379,1.15289475604613,1.17919431703106,3.19606293568008,2.08077780946503,4.29288813023393,5.17672476351131,1.76740963571776,3.4925865805359,1.44929335398807,4.0417761538224,4.76878340965904,5.00501331309933,3.05995810752731,1.89645394202079,3.34157697981624,3.92484527018672,3.73761113690099,2.72367321518044,1.73526452803787,1.91908561490583,2.22989768924562,2.33695340753134,1.7623373209756)
t.test(s1-s2)
s1 <- c(1.879471485118417,3.34761436824355,1.338175807024748,1.641309201408421,2.5065634238319,1.156913232337,3.21079275720563,4.8620553791381,1.20048248452909,3.12813542276675,0.877214632405759,3.78082392842626,2.52448284102927,3.97524770973017,2.90990749877696,1.77949104627265,2.61784471915117,2.87096550789053,3.03890766526748,2.63578841914433,1.86931761810797,1.97865076056747,1.76995359607939,1.6751673929621,1.91039847264269)
s2 <- c(1.87231543525102,3.99903902214379,1.15289475604613,1.17919431703106,3.19606293568008,2.08077780946503,3.29288813023393,5.17672476351131,1.76740963571776,3.4925865805359,1.44929335398807,4.0417761538224,2.76878340965904,4.00501331309933,3.05995810752731,1.89645394202079,3.34157697981624,3.92484527018672,3.03761113690099,2.72367321518044,1.73526452803787,1.91908561490583,2.22989768924562,2.33695340753134,1.7623373209756)
t.test(s1-s2)
s1 <- c(1.879471485118417,3.84761436824355,1.338175807024748,1.641309201408421,2.5065634238319,1.156913232337,3.21079275720563,4.8620553791381,1.20048248452909,3.12813542276675,0.877214632405759,3.78082392842626,2.52448284102927,3.97524770973017,2.90990749877696,1.77949104627265,2.61784471915117,2.87096550789053,3.03890766526748,2.63578841914433,1.86931761810797,1.97865076056747,1.76995359607939,1.6751673929621,1.91039847264269)
s2 <- c(1.87231543525102,3.99903902214379,1.15289475604613,1.17919431703106,3.19606293568008,2.08077780946503,3.29288813023393,5.17672476351131,1.76740963571776,3.4925865805359,1.44929335398807,4.0417761538224,2.76878340965904,4.00501331309933,3.05995810752731,1.89645394202079,3.04157697981624,3.92484527018672,3.03761113690099,2.72367321518044,1.73526452803787,1.91908561490583,1.62989768924562,1.33695340753134,1.7623373209756)
t.test(s1-s2)
t.test(s1-s2, conf.level = 0.9)
t.test(s1-s2, conf.level = 0.99)
s1 <- c(1.879471485118417,3.84761436824355,1.338175807024748,1.641309201408421,3.1065634238319,1.956913232337,3.21079275720563,4.8620553791381,1.20048248452909,3.12813542276675,0.877214632405759,3.78082392842626,2.52448284102927,3.97524770973017,2.90990749877696,1.77949104627265,2.61784471915117,2.87096550789053,3.03890766526748,2.63578841914433,1.86931761810797,1.97865076056747,1.76995359607939,1.6751673929621,1.91039847264269)
s2 <- c(1.87231543525102,3.99903902214379,1.33289475604613,1.57919431703106,3.19606293568008,2.08077780946503,3.29288813023393,5.17672476351131,1.76740963571776,3.4925865805359,1.44929335398807,4.0417761538224,2.76878340965904,4.00501331309933,3.05995810752731,1.89645394202079,3.04157697981624,3.92484527018672,3.03761113690099,2.72367321518044,1.73526452803787,1.91908561490583,1.62989768924562,1.33695340753134,1.7623373209756)
t.test(s1-s2, conf.level = 0.99)
t.test(s1, s2, paired = TRUE)
t.test(s1, s2, paired = TRUE, mu=0.2)
t.test(s1, s2, paired = TRUE, mu=-0.2)
t.test(abs(s1-s2),mu=0.2)
t.test(abs(s1-s2),mu=0)
random(s1)
sample(s1)
sample(s1)
random_means <- c()
for (i in 1:100) {
random_means <- c(random_means, mean(abs(sample(s1) - sample(s2))))
}
random_means
hist(random_means, breaks = 10)
mean(random_means)
s1 <- c(1.879471485118417,3.84761436824355,1.338175807024748,1.641309201408421,3.1065634238319,1.956913232337,3.21079275720563,4.8620553791381,1.20048248452909,3.12813542276675,0.877214632405759,3.78082392842626,2.52448284102927,3.97524770973017,2.90990749877696,1.77949104627265,2.61784471915117,2.87096550789053,3.03890766526748,2.63578841914433,1.86931761810797,1.97865076056747,1.76995359607939,1.6751673929621,1.91039847264269)
s2 <- c(1.87231543525102,3.99903902214379,1.33289475604613,1.57919431703106,3.19606293568008,2.08077780946503,3.29288813023393,5.17672476351131,1.76740963571776,3.4925865805359,1.44929335398807,4.0417761538224,2.76878340965904,4.00501331309933,3.05995810752731,1.89645394202079,3.04157697981624,3.92484527018672,3.03761113690099,2.72367321518044,1.73526452803787,1.91908561490583,1.62989768924562,1.33695340753134,1.7623373209756)
abs(s1-s2)
mean(abs(s1-s2))
library(mcmc)
install.packages('mcmc')
library(mcmc)
install.packages(BayesFactor)
install.packages('BayesFactor')
library(BayesFactor)
help(ttestBF)
ttestBF(s1, s2)
ttestBF(s1, s2, paired=TRUE)
v = ttestBF(s1, s2, paired=TRUE, posterior=TRUE)
v = ttestBF(s1, s2, paired=TRUE)
v
View(v)
v = ttestBF(s1-s2)
v
v = ttestBF(s1, s2, paired=TRUE, posterior = TRUE, iterations = 1000)
plot(v[,"mu"])
v
help(ttestBF)
v
help(BFmcmc)
??BFmcmc
v = ttestBF(s1, s2, paired=TRUE, posterior = TRUE, iterations = 1000, rscale='ultrawide')
plot(v[,"mu"])
class(v)
library(statsr)
install.packages("statsr")
library(statsr)
bayes_inference(s1-s2, statistic="mean", type="ht",
prior="JZS", mu_0=0, method="theo", alt="twosided")
healp(bayes_inference())
help(bayes_inference)
df <- data.frame(diff=s1-s2)
bayes_inference(diff, data=df,statistic="mean", type="ht",
prior="JZS", mu_0=0, method="theo", alt="twosided")
t.test(s1-s2)
library(dynamicTreeCut)
help(cutreeDynamic)
library(igraph)
version(igraph)
package_version(igraph)
packageVersion(ingraph)
packageVersion(igraph)
union
setwd('/home/thodoris/Projects/NAFLD_project/phenotype_networks-master-NAFLD/MASLD---Continuous-trajectory-approach/src/network_analysis/)
4
)
''
'
setwd('/home/thodoris/Projects/NAFLD_project/phenotype_networks-master-NAFLD/MASLD---Continuous-trajectory-approach/src/network_analysis/')
library(igraph)
library(jsonlite)
################################################################################
#
# Output files:
#
# A new folder is created ('consensus_propagation_signatures') to store the generated
# network signatures. These signatures are being saved in two formats: RData and
# JSON.
#
################################################################################
main_dir = paste('../../results/networks/', sep='')
tmp_dir1 = paste(key_dir, 'network_analysis/propagation_results/', sep='')
main_dir = paste('../../results/networks/', sep='')
tmp_dir1 = paste(main_dir, 'network_analysis/propagation_results/', sep='')
tmp_dir2 = paste(main_dir, 'network_analysis/consensus_propagation_signatures/', sep='')
files <- list.files(paste(main_dir, 'network_analysis/propagation_results/', sep=''))
files <- files[grepl('.RData', files)]
################################################################################
#
# 2. MASLD network and propagation results loading
#
################################################################################
# Undirected MASLD network
load(paste(main_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep=''))
network <- MASLD_unified_undirected_network
main_dir
network <- NAFLD_unified_undirected_network
length(network)
dir.create(tmp_dir2, showWarnings = FALSE, recursive = TRUE)
propagation_signatures <- list()
for (file in files) {
tmp <- strsplit(x=file, split = '\\.')[[1]][1]
param <- paste(strsplit(x=tmp, split = '-')[[1]][1], strsplit(x=tmp, split = '-')[[1]][2], sep='-')
damping <- strsplit(x=tmp, split = '-')[[1]][3]
filename <- paste(tmp_dir1, file, sep='')
load(filename)
tmp_signatures <- list()
directions <- c('up', 'down')
for (sw in names(propagation_results)) {
for (direction in directions) {
pvalues_df <- propagation_results[[sw]][[direction]][['pvalues']]
nodes_df <- pvalues_df[pvalues_df$pvalue < 0.05,,drop=FALSE]
propagated_nodes <- rownames(nodes_df)
tmp_signatures[[sw]][[direction]]<- propagated_nodes
}
}
propagation_signatures[[param]][[damping]] <- tmp_signatures
}
final_signatures <- list()
final_signatures_json <- list()
for (param in names(propagation_signatures)) {
tmp_signatures <- list()
for (damping in names(propagation_signatures[[param]])){
tmp <- propagation_signatures[[param]][[damping]]
for (sw in names(tmp)) {
tmp_signatures[[sw]][['up']] <- c(tmp_signatures[[sw]][['up']], tmp[[sw]][['up']])
tmp_signatures[[sw]][['down']] <- c(tmp_signatures[[sw]][['down']], tmp[[sw]][['down']])
}
}
for (sw in names(tmp_signatures)) {
print(paste(param, sw))
# Unify and filter the up_genes
up_counts <- table(tmp_signatures[[sw]][['up']])
up_genes <- names(up_counts[up_counts == 3])
propagated_network <- induced_subgraph(network, vids=up_genes, impl="create_from_scratch")
detected_components <- components(propagated_network)
components <- which(detected_components$csize >=3)
component_nodes <- names(detected_components$membership[detected_components$membership %in% components])
propagated_network <- induced_subgraph(propagated_network, vids=component_nodes,
impl="create_from_scratch")
final_signatures[[param]][[sw]][['up']][['genes_signature']] <- component_nodes
final_signatures[[param]][[sw]][['up']][['subnetwork']] <- propagated_network
final_signatures_json[[param]][[sw]][['up']] <- component_nodes
# Unify and filter the down_genes
down_counts <- table(tmp_signatures[[sw]][['down']])
down_genes <- names(down_counts[down_counts == 3])
propagated_network <- induced_subgraph(network, vids=down_genes, impl="create_from_scratch")
detected_components <- components(propagated_network)
components <- which(detected_components$csize >=3)
component_nodes <- names(detected_components$membership[detected_components$membership %in% components])
propagated_network <- induced_subgraph(propagated_network, vids=component_nodes,
impl="create_from_scratch")
final_signatures[[param]][[sw]][['down']][['genes_signature']] <- component_nodes
final_signatures[[param]][[sw]][['down']][['subnetwork']] <- propagated_network
final_signatures_json[[param]][[sw]][['down']] <- component_nodes
}
}
for (param in names(final_signatures)) {
#RData
propagation_signatures <- final_signatures[[param]]
filename <- paste(tmp_dir2, param, '.RData', sep='')
save(propagation_signatures, file=filename)
# JSON
propagation_signatures_json <- final_signatures_json[[param]]
filename <- paste(tmp_dir2, param, '.json', sep='')
write_json(propagation_signatures_json, filename, auto_unbox = TRUE, pretty = FALSE)
}
load(paste(main_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep=''))
MASLD_unified_undirected_network <- NAFLD_unified_undirected_network
save(MASLD_unified_directed_network, file=paste(main_dir, 'MASLD_unified_undirected_network_with_semantics.RData')
save(MASLD_unified_directed_network, file=paste(main_dir, 'MASLD_unified_undirected_network_with_semantics.RData')
save(MASLD_unified_directed_network, file=paste(main_dir, 'MASLD_unified_undirected_network_with_semantics.RData'))
load(paste(main_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep=''))
MASLD_unified_undirected_network <- NAFLD_unified_undirected_network
length(MASLD_unified_undirected_network)
save(MASLD_unified_undirected_network, file=paste(main_dir, 'MASLD_unified_undirected_network_with_semantics.RData'))
# Undirected MASLD network
load(paste(main_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep=''))
network <- MASLD_unified_undirected_network
length(MASLD_unified_undirected_network)
library(igraph)
library(jsonlite)
source('../library.R')
load(paste(main_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep=''))
network <- MASLD_unified_undirected_network
load('../../data/annotation_databases/annotation_lists.RData')
ref_annotation_list <- annotation_lists[["Reactome_2024"]]
background <- unique(unname(unlist(ref_annotation_list)))
dataset_background <- as_ids(V(network))
gene_set_for_adjustment <- intersect(dataset_background, background)
length(gene_set_for_adjustment)
load(paste(main_dir, 'network_analysis/consensus_propagation_signatures/random_sw-lapl_norm_weight.RData', sep=''))
output_dir <-paste(main_dir, 'network_analysis/Reactome_for_consensus_propagation_signatures/', sep='')
dir.create(output_dir, showWarnings = FALSE)
for (sw in names(propagation_signatures)) {
for (direction in names(propagation_signatures[[sw]])) {
genes_set <- propagation_signatures[[sw]][[direction]]$genes_signature
res = execute_fisher_exact_test(genes_set, ref_annotation_list, TRUE, gene_set_for_adjustment)
res <- res[order(res$adj_p.value, decreasing = FALSE),]
filename <- paste(output_dir, sw, '_', direction, '.tsv', sep='')
write.table(res, file = filename, quote=FALSE, sep='\t')
}
}
main_dir = paste('../results/networks/', sep='')
load(paste(main_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep=''))
library(igraph)
library(jsonlite)
source('../library.R')
main_dir = paste('../../results/networks/', sep='')
load(paste(main_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep=''))
network <- MASLD_unified_undirected_network
################################################################################
# Enrichment analysis of network
################################################################################
load('../../data/annotation_databases/annotation_lists.RData')
ref_annotation_list <- annotation_lists[["Reactome_2024"]]
background <- unique(unname(unlist(ref_annotation_list)))
genes_set <- as_ids(V(network))
genes_set <- as_ids(V(network))
res = execute_fisher_exact_test(genes_set, ref_annotation_list, FALSE)
res <- res[order(res$adj_p.value, decreasing = FALSE),]
filename <- paste(main_dir, 'MASLD_nodes_Reactome.tsv', '.tsv', sep='')
write.table(res, file = filename, quote=FALSE, sep='\t')
genes_set <- c()
for (sw in names(propagation_signatures)) {
for (direction in names(propagation_signatures[[sw]])) {
tmp_genes_set <- propagation_signatures[[sw]][[direction]]$genes_signature
genes_set <- union(genes_set, tmp_genes_set)
}
}
length(genes_set)
res = execute_fisher_exact_test(genes_set, ref_annotation_list, FALSE)
res <- res[order(res$adj_p.value, decreasing = FALSE),]
filename <- paste(main_dir, 'MASLD_nodes_Reactome.tsv', '.tsv', sep='')
write.table(res, file = filename, quote=FALSE, sep='\t')
setwd('/home/thodoris/Projects/NAFLD_project/phenotype_networks-master-NAFLD/MASLD---Continuous-trajectory-approach/src/enrichment_analysis/')
main_project_dir = '../../results/networks/'
load(paste(main_project_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep=''))
load(paste(main_project_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep=''))
main_project_dir = '../../results/networks/'
load(paste(main_project_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep=''))
main_project_dir <- '../../results/networks/'
load(paste(main_project_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep=''))
getwd()
paste(main_project_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep='')
load(paste(main_project_dir, 'MASLD_unified_undirected_network_with_semantics1.RData', sep=''))
network <- MASLD_unified_undirected_network
load(paste(main_project_dir, 'MASLD_unified_undirected_network_with_semantics.RData', sep=''))
load('../ MASLD_unified_undirected_network_with_semantics.RData')
suppressMessages(library(igraph)) # 1.4.3
suppressMessages(library(PCSF)) # 0.99.1
load('../../results/networks/NAFLD_unified_undirected_network_with_semantics.RData')
load('../../results/networks/MASLD_unified_undirected_network_with_semantics.RData')
base_network_df <- igraph::as_data_frame(MASLD_unified_undirected_network)
base_network_df <- base_network_df[,c('from','to', 'weight')]
base_network_df[,'cost'] <- 0.01 * 1/base_network_df[,'weight']
base_network_df <- base_network_df[,c('from','to', 'cost')]
base_ppi <- construct_interactome(base_network_df) # it is undirected
files <- list.files('../../data/sc_liver_cell_atlas/filtered_cell_type_markers/')
output_dir <- '../../data/sc_liver_cell_atlas/pscf_cell_type_markers_markers/'
dir.create(output_dir, showWarnings = FALSE)
for (f in files) {
filename <- paste('../../data/sc_liver_cell_atlas/filtered_cell_type_markers/', f, sep='')
df <- read.csv(filename, row.names = 1, sep='\t')
seeds_scores <- df$avg_log2FC
names(seeds_scores) <- df$gene
network <- PCSF_rand(base_ppi, terminals=seeds_scores, mu=5e-04, n=10, r=0.1)
selected_genes <- as_ids(V(network))
to_remove <- c(selected_genes[grep('^RPS', selected_genes)],
selected_genes[grep('^RPL', selected_genes)],
selected_genes[grep('^RPN', selected_genes)],
selected_genes[grep('^MT', selected_genes)],
selected_genes[grep('^MRPS', selected_genes)],
selected_genes[grep('^MRPL', selected_genes)])
selected_genes <- selected_genes[!selected_genes %in% to_remove]
output_df <- data.frame(gene_symbol=selected_genes)
write.table(output_df, file = paste(output_dir, f, sep=''), sep='\t')
}
