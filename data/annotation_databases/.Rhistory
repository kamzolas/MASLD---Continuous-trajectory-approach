df_summary <- as.data.frame(model_fit$summary())
df_summary
length(omega_results)
data.frame(value=c('P(omega)>1'),probability=c(p))
# P(omega) > 1 given the mcmc draws
p <- sum(omega_results > 1)/length(omega_results)
data.frame(value=c('P(omega)>1'),probability=c(p))
tmp_filename <- paste(output_folder, 'omega_prob.tsv', sep='')
write.table(df_summary, file=tmp_filename, quote = FALSE, sep='\t')
write.table(df, file=tmp_filename, quote = FALSE, sep='\t')
p <- sum(omega_results > 1)/length(omega_results)
df <- data.frame(value=c('P(omega)>1'), probability=c(p))
tmp_filename <- paste(output_folder, 'omega_prob.tsv', sep='')
tmp_filename
df
write.table(df, file=tmp_filename, quote = FALSE, sep='\t')
write.table(df, file=tmp_filename, quote = FALSE, sep='\t', row.names = FALSE)
output_folder <- paste(output_folder, as.character(codon_index), '/', sep = '')
output_folder
filename <- '../results/e_coli/codon_lists/csgB.aln.codons.RData'
load(filename)
length(codons)
codon_index <- 191
# Count the frequency of each codon in the specified codon_index
codon_values <- codons[[codon_index]]
codon_index <- 160
# Count the frequency of each codon in the specified codon_index
codon_values <- codons[[codon_index]]
counts <- table(codon_values)
counts
n_observed <- rep(0, 61)
for (tmp_codon in names(counts)) {
tmp_count <- counts[tmp_codon]
tmp_codon <- toupper(tmp_codon)
tmp_index <- which(triprev == tmp_codon)
n_observed[tmp_index] <- tmp_count
}
n_observed
# Data input for the model
data_list <- list(n_genomes = sum(n_observed),
n_observed = n_observed,
pi_eq = rep(1/61, 61))
# Model fit
model_fit <- mod$sample(data = data_list, threads_per_chain = 1, parallel_chains = 4)
counts
dim(counts)
max(counts)
max(counts)/sum(counts)
length(counts)
counts
as.data.frame(counts)
2188*0.99
# Locus without heterogeneity - no variation
if (lengths(counts) == 1 || max(counts)/sum(counts) > 0.995) {
quit()
} else {
#pass
}
counts
# Locus without heterogeneity - no variation
if (lengths(counts) == 1 || max(counts)/sum(counts) > 0.995) {
print('daskodnasnda')
#quit()
} else {
#pass
}
# Locus without heterogeneity - no variation
if ((lengths(counts)) == 1 || (max(counts)/sum(counts) > 0.995)) {
print('daskodnasnda')
#quit()
} else {
#pass
}
# Locus without heterogeneity - no variation
if ((lengths(counts) == 1) || (max(counts)/sum(counts) > 0.995)) {
print('daskodnasnda')
#quit()
} else {
#pass
}
max(counts)/sum(counts)
# Locus without heterogeneity - no variation
if ((lengths(counts) == 1) | (max(counts)/sum(counts) > 0.995)) {
print('daskodnasnda')
#quit()
} else {
#pass
}
# Locus without heterogeneity - no variation
if ((lengths(counts) == 1) | (max(counts)/sum(counts) > 0.995)) {
print('daskodnasnda')
#quit()
} else {
#pass
}
# Locus without heterogeneity - no variation
if (lengths(counts) == 1 | max(counts)/sum(counts) > 0.995) {
print('daskodnasnda')
#quit()
} else {
#pass
}
max(counts)/sum(counts) > 0.995
lengths(counts) == 1
lengths(counts) == 1
lengths(counts)
counts
dim(counts)
# Locus without heterogeneity - no variation
if (dim(counts) == 1 | max(counts)/sum(counts) > 0.995) {
print('daskodnasnda')
#quit()
} else {
#pass
}
counts_df
codon_values <- codons[[codon_index]]
counts <- table(codon_values)
counts_df <- as.data.frame(counts)
counts_df
length(counts_df)
# Locus without heterogeneity - no variation
if (length(counts_df) == 1 | max(counts)/sum(counts) > 0.995) {
print('daskodnasnda')
#quit()
} else {
#pass
}
for (i in seq_along(codons)) {
s <- codons[[i]]
if (length(s) > 3) {
print(i)
}
}
s
for (i in seq_along(codons)) {
s <- codons[[i]]
s <- table(s)
if (length(s) > 3) {
print(i)
}
}
codons
length(codons)
codons[[161]]
n_observed <- round(runif(61, 0, 200))
n_observed
n_observed[n_observed < 50] <- 0
n_observed
n_observed[n_observed < 150] <- 0
n_observed
# Data input for the model
data_list <- list(n_genomes = sum(n_observed),
n_observed = n_observed,
pi_eq = rep(1/61, 61))
# Model fit
model_fit <- mod$sample(data = data_list, threads_per_chain = 1, parallel_chains = 4)
results <- model_fit$draws(variables = c("omega", "kappa", "theta"))
# MCMC draws (1000 per chain per variable)
p <- mcmc_areas(results, prob=0.5) + scale_x_continuous(breaks=seq(0, ceiling(max(results)), 1))
p
results <- model_fit$draws(variables = c("omega", "kappa", "theta"))
# MCMC omega draws (1000 per chain)
omega_results <- results[,,1]
p <- mcmc_areas(omega_results, prob=0.5)
p + geom_vline(xintercept = 1, color='peru', linetype = "dashed") +
scale_x_continuous(breaks=seq(0, ceiling(max(results[,,1])), 1))
output_folder
output_folder <-  "../results/e_coli/tombombadil_outputs/test"
# MCMC omega draws (1000 per chain)
omega_results <- results[,,1]
p <- mcmc_areas(omega_results, prob=0.5)
p + geom_vline(xintercept = 1, color='peru', linetype = "dashed") +
scale_x_continuous(breaks=seq(0, ceiling(max(results[,,1])), 1))
tmp_filename <- paste(output_folder, 'mcmc_omega_draw.png', sep='')
ggsave(tmp_filename, height=4, width=6, dpi=300, units='in')
output_folder <-  "../results/e_coli/tombombadil_outputs/test/"
omega_results <- results[,,1]
p <- mcmc_areas(omega_results, prob=0.5)
p + geom_vline(xintercept = 1, color='peru', linetype = "dashed") +
scale_x_continuous(breaks=seq(0, ceiling(max(results[,,1])), 1))
tmp_filename <- paste(output_folder, 'mcmc_omega_draw.png', sep='')
ggsave(tmp_filename, height=4, width=6, dpi=300, units='in')
p + geom_vline(xintercept = 1, color='peru', linetype = "dashed") +
scale_x_continuous(breaks=seq(0, ceiling(max(results[,,1])), 1)) ++
theme(text = element_text(size = 20))
p + geom_vline(xintercept = 1, color='peru', linetype = "dashed") +
scale_x_continuous(breaks=seq(0, ceiling(max(results[,,1])), 1)) +
theme(text = element_text(size = 20))
p + geom_vline(xintercept = 1, color='peru', linetype = "dashed") +
scale_x_continuous(breaks=seq(0, ceiling(max(results[,,1])), 1)) +
theme(text = element_text(size = 30))
p + geom_vline(xintercept = 1, color='peru', linetype = "dashed") +
scale_x_continuous(breaks=seq(0, ceiling(max(results[,,1])), 1)) +
theme(text = element_text(size = 26))
tmp_filename <- paste(output_folder, 'mcmc_omega_draw.png', sep='')
ggsave(tmp_filename, height=4, width=6, dpi=300, units='in')
tmp_filename <- paste(output_folder, 'mcmc_omega_draw1.png', sep='')
ggsave(tmp_filename, height=4, width=6, dpi=300, units='in')
n_observed[n_observed < 180] <- 0
n_observed
# Data input for the model
data_list <- list(n_genomes = sum(n_observed),
n_observed = n_observed,
pi_eq = rep(1/61, 61))
# Model fit
model_fit <- mod$sample(data = data_list, threads_per_chain = 1, parallel_chains = 4)
results <- model_fit$draws(variables = c("omega", "kappa", "theta"))
# MCMC omega draws (1000 per chain)
omega_results <- results[,,1]
p <- mcmc_areas(omega_results, prob=0.5)
p + geom_vline(xintercept = 1, color='peru', linetype = "dashed") +
scale_x_continuous(breaks=seq(0, ceiling(max(results[,,1])), 1)) +
theme(text = element_text(size = 26))
tmp_filename <- paste(output_folder, 'mcmc_omega_draw2.png', sep='')
ggsave(tmp_filename, height=4, width=6, dpi=300, units='in')
n_observed
n_observed <- round(runif(61, 0, 200))
n_observed[n_observed < 180] <- 0
n_observed
n_observed[5] <- 500
# Data input for the model
data_list <- list(n_genomes = sum(n_observed),
n_observed = n_observed,
pi_eq = rep(1/61, 61))
# Model fit
model_fit <- mod$sample(data = data_list, threads_per_chain = 1, parallel_chains = 4)
results <- model_fit$draws(variables = c("omega", "kappa", "theta"))
# MCMC draws (1000 per chain per variable)
p <- mcmc_areas(results, prob=0.5) + scale_x_continuous(breaks=seq(0, ceiling(max(results)), 1))
tmp_filename <- paste(output_folder, 'mcmc_draws.png', sep='')
# MCMC omega draws (1000 per chain)
omega_results <- results[,,1]
p <- mcmc_areas(omega_results, prob=0.5)
p + geom_vline(xintercept = 1, color='peru', linetype = "dashed") +
scale_x_continuous(breaks=seq(0, ceiling(max(results[,,1])), 1)) +
theme(text = element_text(size = 26))
tmp_filename <- paste(output_folder, 'mcmc_omega_draw3.png', sep='')
ggsave(tmp_filename, height=4, width=6, dpi=300, units='in')
n_observed <- round(runif(61, 0, 200))
n_observed[n_observed < 190] <- 0
n_observed
n_observed[15] <- 2
n_observed
# Data input for the model
data_list <- list(n_genomes = sum(n_observed),
n_observed = n_observed,
pi_eq = rep(1/61, 61))
# Model fit
model_fit <- mod$sample(data = data_list, threads_per_chain = 1, parallel_chains = 4)
results <- model_fit$draws(variables = c("omega", "kappa", "theta"))
# MCMC omega draws (1000 per chain)
omega_results <- results[,,1]
p <- mcmc_areas(omega_results, prob=0.5)
p + geom_vline(xintercept = 1, color='peru', linetype = "dashed") +
scale_x_continuous(breaks=seq(0, ceiling(max(results[,,1])), 1)) +
theme(text = element_text(size = 26))
tmp_filename <- paste(output_folder, 'mcmc_omega_draw2.png', sep='')
ggsave(tmp_filename, height=4, width=6, dpi=300, units='in')
s <- 'input_id.2'
strsplit(s, '\\.')
strsplit(s, '\\.')[[1]]
strsplit(s, '\\.')[[1]][2]
pool_df = read.table('genes_pool_for_analysis.txt', sep='\t', header=TRUE, row.names=1)
getwd()
setwd("/home/thodoris/Projects/COFUN/src/e_coli")
pool_df = read.table('genes_pool_for_analysis.txt', sep='\t', header=TRUE, row.names=1)
pool_df
genes_pool <- pool_df$gene_symbol
genes_pool
for (gene in genes_pool) {
filename <- paste('../../results/e_coli/codon_lists/', gene, '.aln.codons.RData', sep='')
}
filename
for (gene in genes_pool) {
filename <- paste('../../results/e_coli/codon_lists/', gene, '.aln.codons.RData', sep='')
load(filename)
print(length(codons))
}
eq_along(codons)
seq_along(codons)
df <- c()
for (gene in genes_pool) {
filename <- paste('../../results/e_coli/codon_lists/', gene, '.aln.codons.RData', sep='')
load(filename)
tmp_df <- data.frame(codon_index=seq_along(codons), filename=filename)
df <- rbind(df, tmp_df)
}
View(df)
View(df)
files_to_generate <- ceiling(dim(df)[1]/24000)
files_to_generate
files_to_generate <- ceiling(dim(df)[1]/20000)
files_to_generate <- ceiling(dim(df)[1]/10000)
files_to_generate
for (file_index in 1:files_to_generate) {
i = file_index-1
tmp_df <- df[file_index+(i*10000): file_index*10000]
print(dim(tmp_df))
}
for (file_index in 1:files_to_generate) {
i = file_index-1
index1 <- file_index+(i*10000)
index2 <- file_index*10000
tmp_df <- df[index1:index2,]
print(dim(tmp_df))
}
tmp_df
rownames(tmp_df)[5000:5500]
rownames(tmp_df)[8000:8500]
files_to_generate <- ceiling(dim(df)[1]/10000)
for (file_index in 1:files_to_generate) {
if (file_index == files_to_generate) {
i = file_index-1
index1 <- file_index+(i*10000)
index2 <- dim(df)[1]
} else {
i = file_index-1
index1 <- file_index+(i*10000)
index2 <- file_index*10000
}
tmp_df <- df[index1:index2,]
print(dim(tmp_df))
}
dim(df)
rownames(df)[17730:]
tail(rownames(df), 20)
tail(rownames(tmp_df), 20)
N = 5000
files_to_generate <- ceiling(dim(df)[1]/N)
files_to_generate
for (file_index in 1:files_to_generate) {
if (file_index == files_to_generate) {
i = file_index-1
index1 <- file_index+(i*N)
index2 <- dim(df)[1]
} else {
i = file_index-1
index1 <- file_index+(i*N)
index2 <- file_index*N
}
tmp_df <- df[index1:index2,]
print(dim(tmp_df))
}
1:files_to_generate
N = 5000
files_to_generate <- ceiling(dim(df)[1]/N)
for (file_index in 1:files_to_generate) {
if (file_index == files_to_generate) {
i = file_index-1
index1 <- file_index+(i*N)
index2 <- dim(df)[1]
} else {
i = file_index-1
index1 <- file_index+(i*N)
index2 <- file_index*N
}
print(file_index)
print(index1)
print(index2)
tmp_df <- df[index1:index2,]
#print(dim(tmp_df))
}
for (file_index in 1:files_to_generate) {
if (file_index == files_to_generate) {
i = file_index-1
index1 <- i*N + 1
index2 <- dim(df)[1]
} else {
i = file_index-1
index1 <- i*N + 1
index2 <- file_index*N
}
print(file_index)
print(index1)
print(index2)
tmp_df <- df[index1:index2,]
#print(dim(tmp_df))
}
N = 5000
files_to_generate <- ceiling(dim(df)[1]/N)
for (file_index in 1:files_to_generate) {
if (file_index == files_to_generate) {
i = file_index-1
index1 <- i*N + 1
index2 <- dim(df)[1]
} else {
i = file_index-1
index1 <- i*N + 1
index2 <- file_index*N
}
tmp_df <- df[index1:index2,]
print(dim(tmp_df))
}
N = 20000
files_to_generate <- ceiling(dim(df)[1]/N)
for (file_index in 1:files_to_generate) {
if (file_index == files_to_generate) {
i = file_index-1
index1 <- i*N + 1
index2 <- dim(df)[1]
} else {
i = file_index-1
index1 <- i*N + 1
index2 <- file_index*N
}
tmp_df <- df[index1:index2,]
print(dim(tmp_df))
}
head(tmp_df)
output_dir <- './job_arrays_for_tombombadil/'
dir.create(output_dir, showWarnings = FALSE)
pool_df = read.table('genes_pool_for_analysis.txt', sep='\t', header=TRUE, row.names=1)
genes_pool <- pool_df$gene_symbol
# Concatenate all the codon lists into a data frame
df <- c()
for (gene in genes_pool) {
filename <- paste('../../results/e_coli/codon_lists/', gene, '.aln.codons.RData', sep='')
load(filename)
tmp_df <- data.frame(codon_index=seq_along(codons), filename=filename)
df <- rbind(df, tmp_df)
}
# Split the data frame into chunks based on job arrays threshold
N <- 20000
files_to_generate <- ceiling(dim(df)[1]/N)
for (file_index in 1:files_to_generate) {
if (file_index == files_to_generate) {
i = file_index-1
index1 <- i*N + 1
index2 <- dim(df)[1]
} else {
i = file_index-1
index1 <- i*N + 1
index2 <- file_index*N
}
tmp_df <- df[index1:index2,]
rownames(tmp_df) <- NULL
filename <- paste(output_dir, 'job_array_', as.character(file_index), '.tsv', sep='')
write.table(filename, sep='\t')
}
# Split the data frame into chunks based on job arrays threshold
N <- 5000
files_to_generate <- ceiling(dim(df)[1]/N)
for (file_index in 1:files_to_generate) {
if (file_index == files_to_generate) {
i = file_index-1
index1 <- i*N + 1
index2 <- dim(df)[1]
} else {
i = file_index-1
index1 <- i*N + 1
index2 <- file_index*N
}
tmp_df <- df[index1:index2,]
rownames(tmp_df) <- NULL
filename <- paste(output_dir, 'job_array_', as.character(file_index), '.tsv', sep='')
write.table(tmp_df, filename, sep='\t')
}
head(tmp_df)
help(unlink)
unlink(paste(output_dir, '*', sep=''))
# Split the data frame into chunks based on job arrays threshold
N <- 5000
files_to_generate <- ceiling(dim(df)[1]/N)
for (file_index in 1:files_to_generate) {
if (file_index == files_to_generate) {
i = file_index-1
index1 <- i*N + 1
index2 <- dim(df)[1]
} else {
i = file_index-1
index1 <- i*N + 1
index2 <- file_index*N
}
tmp_df <- df[index1:index2,]
rownames(tmp_df) <- NULL
filename <- paste(output_dir, 'job_array_', as.character(file_index), '.tsv', sep='')
write.table(tmp_df, filename, sep='\t')
}
df = read.table(filename, header=TRUE, row.names = 1, sep='\t')
head(df)
setwd('../../TOMBOMBADIL/')
mod <- cmdstan_model("models/single_locus.stan", cpp_options = list(stan_threads = TRUE))
mod <- cmdstan_model(stan_file = "models/single_locus.stan", cpp_options = list(stan_threads = TRUE))
mod <- cmdstan_model(stan_file = "models/single_locus.stan", cpp_options = list(stan_threads = TRUE))
help("write.table")
setwd('/home/thodoris/Projects/NAFLD_project/phenotype_networks-master-NAFLD/data/annotation_databases/')
load('annotation_lists.RData')
reactome_annotation <- annotation_lists[["Reactome_2024"]]
length(reactome_annotation)
reactome_annotation
save(reactome_annotation, 'reactome_2024.RData')
reactome_annotation <- annotation_lists[["Reactome_2024"]]
save(reactome_annotation, file = 'reactome_2024.RData')
reactome_annotation
df <- ()
for(p in names(reactome_annotation)) {
genes <- reactome_annotation[[p]]
df <- rbind(df,data.frame(term=p, gene=genes))
}
df <- c()
for(p in names(reactome_annotation)) {
genes <- reactome_annotation[[p]]
df <- rbind(df,data.frame(term=p, gene=genes))
}
dim(df)
head(df)
write.table(df, file = 'reactome_2024.tsv', sep='\t', quote = FALSE)
write.table(df, file = 'reactome_2024.tsv', sep='\t', quote = FALSE, row.names = FALSE)
length(unique(df$p))
length(unique(df$term))
length(unique(df$gene))
